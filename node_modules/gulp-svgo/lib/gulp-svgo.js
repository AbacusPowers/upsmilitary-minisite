/*jslint node: true, maxlen: 120 */

/*

gulp-svgo

A gulp module to minify SVG images using svgo.

This module is heavily based upon the gulp-imagemin module by Sindre Sorhus. I especially liked
the output of gulp-imagemin - which is something I felt was lacking in gulp-svgmin. Rather than
fork gulp-svgmin and fix that, it looked easier to actually fork gulp-imagemin and rewrite the
guts to use svgo instead of imagemin.

With due credit to Sindre Sorhus, for gulp-imagemin which is awesome. And also to ben-eb, who
created gulp-svgmin.

*/

"use strict";

var map, path, gutil, SVGOptimize, filesize, svgo;

map         = require('map-stream');
gutil       = require("gulp-util");
path        = require("path");
SVGOptimize = require("svgo");
filesize    = require('filesize');

module.exports = function (options) {

    // Instantiate SVGO with the options defined
    svgo = new SVGOptimize(options);

    return map(function (file, cb) {

        var originalSize;

        if (file.isNull()) {
            return cb(null, file);
        }

        if (file.isStream()) {
            return cb(new gutil.PluginError('gulp-svgo', 'Streaming not supported'));
        }

        // Double check we have SVG images
        if (path.extname(file.path).toLowerCase() !== ".svg") {
            gutil.log('gulp-svgo: Skipping unsupported image ' + gutil.colors.blue(file.relative));
            return cb(null, file);
        }

        // So if we get here then we have a buffer with our data in, and we are fairly
        // sure that the data in the buffer is an SVG. So we cache the current length
        // of the buffer so we can check if we do any good
        originalSize = file.contents.length;

        // Now convert the buffer to a string and throw it at svgo
        svgo.optimize(file.contents.toString("utf8"), function (result) {

            var bytesSaved, statusMessage, optimized;

            if (result.error) {
                return cb(new gutil.PluginError('gulp-svgo', result.error));
            }

            // Calculate how much space we saved
            optimized = new Buffer(result.data, "utf8");
            bytesSaved = originalSize - optimized.length;

            // Output a status message
            statusMessage = bytesSaved > 0 ? 'saved ' + filesize(bytesSaved, {round: 1}) : 'already optimized';
            statusMessage = gutil.colors.green('âœ” ') + file.relative + gutil.colors.gray(' (' + statusMessage + ')');
            gutil.log('gulp-svgo:', statusMessage);

            // Pass on the file
            if (bytesSaved > 0) {
                file.contents = optimized;
            }

            cb(null, file);
        });
    });
};
